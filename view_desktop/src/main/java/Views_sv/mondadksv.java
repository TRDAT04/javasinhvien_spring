/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views_sv;

import Models.DangKy;
import Models.HocKy;
import Models.Monhoc;
import Models.TaiKhoan;
import com.google.gson.Gson;
import javax.swing.table.DefaultTableModel;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;

/**
 *
 * @author LNV
 */
public class mondadksv extends javax.swing.JPanel {

    private java.util.HashMap<String, String> hkMap = new java.util.HashMap<>(); // key = tên hk, value = mã hk
    private java.util.HashMap<String, String> hkMapReverse = new java.util.HashMap<>();
    private TaiKhoan tk;

    /**
     * Creates new form mondadksv
     */
    public mondadksv() {
        initComponents();
    }

    public mondadksv(TaiKhoan tk) {
        initComponents();
        this.tk = tk;
        String masv = tk.getUsername();
        loadhocky();
        txtsv.setText(tk.getHoten());
        cbxhocky.addActionListener(e -> loadData());
    }

    private void loadhocky() {
        try {
            URL url = new URL("http://localhost:8080/api/hocky");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), StandardCharsets.UTF_8));
            StringBuilder response = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            Gson gson = new Gson();
            HocKy[] list = gson.fromJson(response.toString(), HocKy[].class);

            cbxhocky.removeAllItems();
            cbxhocky.addItem("---Chọn học kỳ---");

            for (HocKy hk : list) {
                cbxhocky.addItem(hk.getTenhk());
                hkMap.put(hk.getTenhk(), hk.getMahk());
                hkMapReverse.put(hk.getMahk(), hk.getTenhk());
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu học kỳ!");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnhuydk = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbxhocky = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtsv = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Chọn", "Mã môn", "Tên môn", "Số tín chỉ"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnhuydk.setText("Hủy đăng ký");
        btnhuydk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnhuydkActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Danh sách môn đã đăng ký");

        cbxhocky.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---Chọn học kỳ---" }));

        jLabel2.setText("Sinh viên: ");

        txtsv.setEditable(false);

        jLabel4.setText("Chọn học kỳ:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxhocky, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtsv, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                .addGap(264, 264, 264))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btnhuydk)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 46, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtsv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxhocky, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnhuydk)
                .addContainerGap(36, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
 private void loadData() {
        String masv = tk.getUsername();
        String mahk = hkMap.get(cbxhocky.getSelectedItem().toString());
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                if (columnIndex == 0) {
                    return Boolean.class; // checkbox
                }
                return String.class;
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 0; // chỉ checkbox được chỉnh
            }
        };
        model.setColumnIdentifiers(new Object[]{"Chọn", "Mã môn", "Tên môn", "Số tín chỉ"});

        try {
            String urlStr = "http://localhost:8080/api/mon/dadangky?masv=" + masv + "&mahk=" + mahk;
            URL url = new URL(urlStr);
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");
            con.setRequestProperty("Accept", "application/json");

            int responseCode = con.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                InputStreamReader reader = new InputStreamReader(con.getInputStream(), "utf-8");
                BufferedReader br = new BufferedReader(reader);
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }
                br.close();

                Gson gson = new Gson();
                Monhoc[] ds = gson.fromJson(response.toString(), Monhoc[].class);

                for (Monhoc mh : ds) {
                    model.addRow(new Object[]{
                        false,
                        mh.getMamon(),
                        mh.getTenmon(),
                        mh.getSotinchi(),});
                }

                jTable1.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "Không thể tải dữ liệu. Mã lỗi: " + responseCode);
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi tải danh sách đăng ký!");
        }
    }

    private void btnhuydkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnhuydkActionPerformed
        String masv = tk.getUsername();
        String mahk = hkMap.get(cbxhocky.getSelectedItem().toString());
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        boolean coMonBiChon = false;
        boolean coLoi = false;

        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean selected = (Boolean) model.getValueAt(i, 0);
            if (Boolean.TRUE.equals(selected)) {
                coMonBiChon = true;
                String mamon = (String) model.getValueAt(i, 1);

                try {
                    String apiUrl = String.format("http://localhost:8080/api/dangky?masv=%s&mamon=%s&mahk=%s",
                            URLEncoder.encode(masv, "UTF-8"),
                            URLEncoder.encode(mamon, "UTF-8"),
                            URLEncoder.encode(mahk, "UTF-8"));

                    HttpURLConnection con = (HttpURLConnection) new URL(apiUrl).openConnection();
                    con.setRequestMethod("DELETE");

                    int code = con.getResponseCode();
                    if (code != 200) {
                        String message = new BufferedReader(new InputStreamReader(con.getErrorStream(), StandardCharsets.UTF_8))
                                .lines().collect(Collectors.joining("\n"));

                        if (message.toLowerCase().contains("quá hạn")) {
                            JOptionPane.showMessageDialog(this,
                                    "Không thể hủy môn " + mamon + ": đã quá hạn 7 ngày.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(this,
                                    "Lỗi khi hủy môn " + mamon + ": " + message, "Lỗi", JOptionPane.ERROR_MESSAGE);
                        }

                        coLoi = true;
                    }

                } catch (Exception e) {
                    coLoi = true;
                    JOptionPane.showMessageDialog(this,
                            "Lỗi khi hủy đăng ký môn " + mamon, "Lỗi", JOptionPane.ERROR_MESSAGE);
                    e.printStackTrace();
                }
            }
        }

        if (!coMonBiChon) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một môn để hủy.");
            return;
        }

        loadData();

        if (!coLoi) {
            JOptionPane.showMessageDialog(this, "Đã hủy đăng ký các môn được chọn.");
        }
    }//GEN-LAST:event_btnhuydkActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnhuydk;
    private javax.swing.JComboBox<String> cbxhocky;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtsv;
    // End of variables declaration//GEN-END:variables
}
