/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views;

import Models.DangKy;
import Models.HocKy;
import Models.Monhoc;
import Models.SinhVien;
import Views.DanhSachDangKyView;
import com.google.gson.Gson;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import main.qlsinhvien.AdminMainMenu;

/**
 *
 * @author LNV
 */
public class DangKyView extends javax.swing.JPanel {

    public AdminMainMenu mainMenu;

    private java.util.HashMap<String, String> svMap = new java.util.HashMap<>(); // key = tên sinhvien, value = mã sv
    private java.util.HashMap<String, String> svMapReverse = new java.util.HashMap<>();  // key = mã sv, value = tên sv

    private java.util.HashMap<String, String> hkMap = new java.util.HashMap<>(); // key = tên hk, value = mã hk
    private java.util.HashMap<String, String> hkMapReverse = new java.util.HashMap<>();  // key = mã hk, value = tên hk

    /**
     * Creates new form DangKyView
     */
    public DangKyView() {
        initComponents();
        loadsinhvien();
        loadhocky();

        cbxsinhvien.addActionListener(e -> reloadMonHocTheoSinhVienVaHK());
        cbxhocky.addActionListener(e -> reloadMonHocTheoSinhVienVaHK());
    }

    public DangKyView(AdminMainMenu mainMenu) {
        this.mainMenu = mainMenu;
        initComponents();
        loadsinhvien();
        loadhocky();

        cbxsinhvien.addActionListener(e -> reloadMonHocTheoSinhVienVaHK());
        cbxhocky.addActionListener(e -> reloadMonHocTheoSinhVienVaHK());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbxsinhvien = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablemonhoc = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        cbxhocky = new javax.swing.JComboBox<>();
        btndangky = new javax.swing.JButton();
        btnlammoi = new javax.swing.JButton();
        btnmondadk = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Đăng ký môn cho sinh viên");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setText("Sinh viên: ");

        cbxsinhvien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---Chọn sinh viên---" }));

        tablemonhoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Chọn", "Mã môn", "Tên môn", "Số tín chỉ"
            }
        ));
        jScrollPane1.setViewportView(tablemonhoc);

        jLabel4.setText("Chọn học kỳ:");

        cbxhocky.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---Chọn học kỳ---" }));

        btndangky.setText("Đăng ký");
        btndangky.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndangkyActionPerformed(evt);
            }
        });

        btnlammoi.setText("Làm mới");
        btnlammoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnlammoiActionPerformed(evt);
            }
        });

        btnmondadk.setText("Xem môn đã đang ký");
        btnmondadk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnmondadkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btndangky)
                                .addGap(18, 18, 18)
                                .addComponent(btnlammoi))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbxsinhvien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxhocky, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnmondadk))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbxsinhvien, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxhocky, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnmondadk)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btndangky)
                    .addComponent(btnlammoi))
                .addGap(34, 34, 34))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
        private List<DangKy> getMonHocDaChon() {
        List<DangKy> list = new ArrayList<>();
        DefaultTableModel model = (DefaultTableModel) tablemonhoc.getModel();

        String masv = cbxsinhvien.getSelectedItem().toString().split("-")[0].trim();
        String mahk = hkMap.get(cbxhocky.getSelectedItem());

        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean selected = (Boolean) model.getValueAt(i, 0);
            if (Boolean.TRUE.equals(selected)) {
                String mamon = (String) model.getValueAt(i, 1);
                list.add(new DangKy(masv, mahk, mamon));
            }
        }
        return list;
    }

    private boolean guiDangKy(List<DangKy> list) {
        try {
            Gson gson = new Gson();
            String json = gson.toJson(list);

            URL url = new URL("http://localhost:8080/api/dangky");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("POST");
            con.setRequestProperty("Content-Type", "application/json; utf-8");
            con.setDoOutput(true);

            try (OutputStream os = con.getOutputStream()) {
                os.write(json.getBytes("utf-8"));
            }

            return con.getResponseCode() == 200;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }
    private void btndangkyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndangkyActionPerformed
        if (cbxsinhvien.getSelectedIndex() == 0 || cbxhocky.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sinh viên và học kỳ trước khi đăng ký.");
            return;
        }
        List<DangKy> ds = getMonHocDaChon();
        if (ds.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn ít nhất một môn học.");
            return;
        }

        boolean thanhCong = guiDangKy(ds);
        if (thanhCong) {
            JOptionPane.showMessageDialog(this, "Đăng ký môn học thành công!");
            reloadMonHocTheoSinhVienVaHK();
        } else {
            JOptionPane.showMessageDialog(this, "Đăng ký thất bại.");
        }
    }//GEN-LAST:event_btndangkyActionPerformed

    private void btnlammoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnlammoiActionPerformed
        cbxsinhvien.setSelectedIndex(0);  // Reset sinh viên
        cbxhocky.setSelectedIndex(0);     // Reset học kỳ
        DefaultTableModel model = (DefaultTableModel) tablemonhoc.getModel();
        model.setRowCount(0);
    }//GEN-LAST:event_btnlammoiActionPerformed

    private void btnmondadkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnmondadkActionPerformed
        String svSelection = (String) cbxsinhvien.getSelectedItem();
        String hkSelection = (String) cbxhocky.getSelectedItem();

        if (svSelection == null || svSelection.equals("---Chọn sinh viên---")
                || hkSelection == null || hkSelection.equals("---Chọn học kỳ---")) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sinh viên và học kỳ!");
            return;
        }

        String masv = svSelection.split("-")[0].trim();
        String mahk = hkMap.get(hkSelection);

        String tensv = svMapReverse.get(masv);
        DanhSachDangKyView panel = new DanhSachDangKyView(masv, mahk, mainMenu, tensv);

        mainMenu.setContentPanel(panel);
    }//GEN-LAST:event_btnmondadkActionPerformed

    private void loadsinhvien() {
        try {
            URL url = new URL("http://localhost:8080/api/sinhvien");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), StandardCharsets.UTF_8));
            StringBuilder response = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            Gson gson = new Gson();
            SinhVien[] list = gson.fromJson(response.toString(), SinhVien[].class);

            cbxsinhvien.removeAllItems();
            cbxsinhvien.addItem("---Chọn sinh viên---");

            for (SinhVien sv : list) {
                cbxsinhvien.addItem(sv.getMasv() + " - " + sv.getHoten());
                svMap.put(sv.getHoten(), sv.getMasv());
                svMapReverse.put(sv.getMasv(), sv.getHoten());
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu sinh viên!");
        }
    }

    private void loadhocky() {
        try {
            URL url = new URL("http://localhost:8080/api/hocky");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), StandardCharsets.UTF_8));
            StringBuilder response = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            Gson gson = new Gson();
            HocKy[] list = gson.fromJson(response.toString(), HocKy[].class);

            cbxhocky.removeAllItems();
            cbxhocky.addItem("---Chọn học kỳ---");

            for (HocKy hk : list) {
                cbxhocky.addItem(hk.getTenhk());
                hkMap.put(hk.getTenhk(), hk.getMahk());
                hkMapReverse.put(hk.getMahk(), hk.getTenhk());
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi nạp dữ liệu học kỳ!");
        }
    }

    private void reloadMonHocTheoSinhVienVaHK() {
        String selectedSinhVien = (String) cbxsinhvien.getSelectedItem();
        String selectedHocKy = (String) cbxhocky.getSelectedItem();

        // Kiểm tra nếu chưa chọn thực sự
        if (selectedSinhVien == null || selectedSinhVien.equals("---Chọn sinh viên---")
                || selectedHocKy == null || selectedHocKy.equals("---Chọn học kỳ---")) {
            return;
        }

        String masv = selectedSinhVien.split(" - ")[0].trim();  // vì chuỗi dạng "SV001 - Nguyễn Văn A"
        String mahk = hkMap.get(selectedHocKy);
        try {
            URL url = new URL("http://localhost:8080/api/mon/chuadangky?masv="
                    + URLEncoder.encode(masv, "UTF-8")
                    + "&mahk=" + URLEncoder.encode(mahk, "UTF-8"));
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream(), StandardCharsets.UTF_8));
            StringBuilder response = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();

            Gson gson = new Gson();
            Monhoc[] list = gson.fromJson(response.toString(), Monhoc[].class);

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    return columnIndex == 0 ? Boolean.class : String.class;
                }

                @Override
                public boolean isCellEditable(int row, int column) {
                    return column == 0;
                }
            };

            model.addColumn("Chọn");
            model.addColumn("Mã môn");
            model.addColumn("Tên môn");
            model.addColumn("Số tín chỉ");

            for (Monhoc mh : list) {
                model.addRow(new Object[]{false, mh.getMamon(), mh.getTenmon(), mh.getSotinchi()});
            }

            tablemonhoc.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi lọc môn học chưa đăng ký!");
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btndangky;
    private javax.swing.JButton btnlammoi;
    private javax.swing.JButton btnmondadk;
    private javax.swing.JComboBox<String> cbxhocky;
    private javax.swing.JComboBox<String> cbxsinhvien;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablemonhoc;
    // End of variables declaration//GEN-END:variables
}
